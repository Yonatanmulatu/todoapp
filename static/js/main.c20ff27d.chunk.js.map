{"version":3,"sources":["components/TaskRow.js","components/RegisterationForm.js","App.js","serviceWorker.js","index.js"],"names":["TaskRow","deleteBtn","alert","props","id","axios","delete","doneBtn","put","status","this","task","onClick","React","Component","RegisterationForm","state","username","password","confirmPassword","inputChangeHandler","e","setState","target","name","value","register","error","trim","type","onChange","App","addTask","tasks","InputChangeHandle","checkout","post","preventDefault","pendingTask","newTask","console","log","then","res","data","doneTasks","filter","pendingTasks","className","onSubmit","placeholder","map","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c20ff27d.chunk.js","sourcesContent":["import React from 'react';\n// import { render } from '@testing-library/react';\nimport axios from 'axios';\n\nclass TaskRow extends React.Component {\n\n    deleteBtn = () => {\n        // this.props.delete(this.props.task)\n        alert(this.props.id)\n        axios.delete('http://localhost:8080/tasks/' + this.props.id)\n    }\n\n    doneBtn = () => {\n        axios.put('http://localhost:8080/tasks/' + this.props.id, {status: 'done'})\n    }\n\n    render() {\n        return (\n            <tr>\n                <td>\n                    {this.props.task} \n                </td>\n                <button onClick={this.deleteBtn}>Delete</button>\n                <button onClick={this.doneBtn}>Done</button>\n            </tr>\n        )\n    }\n}\n\nexport default TaskRow;\n","import React from 'react';\n// import { register } from '../serviceWorker';\n// import { render } from '@testing-library/react';\n\n\nclass RegisterationForm extends React.Component {\n\n    state = {\n        username: '',\n        password:'',\n        confirmPassword:'',\n    }\n\n    inputChangeHandler = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    register = () => {\n        let error = false;\n        if(this.state.username.trim() === '' || this.state.password.trim() === '' || this.state.confirmPassword.trim() ==='') {\n            error = true;\n        }\n        if(this.state.password !== this.state.confirmPassword) {\n            error = true;\n        }\n        if(error) {\n            alert('register');\n        } else {\n            alert(\"there is an error\")\n        }\n    }\n    \n    render() {\n        return(\n            <div>\n                Username: <input type='text' onChange={this.inputChangeHandler} value={this.state.name} name='username'/>\n                Password: <input type='password' onChange={this.inputChangeHandler} value={this.state.name} name='password'/>\n                Confirm Password: <input type='password' onChange={this.inputChangeHandler} value={this.state.name} name='confirmPassword'/>\n                <button onClick={this.register}>Register</button>\n            </div>\n        )\n    }\n}\n\nexport default RegisterationForm;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import AddTaskForm from './components/AddTaskForm';\nimport TaskRow from './components/TaskRow';\n// import { Router, Link, Route} from 'react-router-dom';\nimport axios from 'axios';\nimport RegisterationForm from './components/RegisterationForm';\n\nclass App extends React.Component {\n\n  state = {\n    name: '',\n    status: '',\n    addTask: '',\n    tasks: []\n  };\n\n  InputChangeHandle = (e) => {\n\n    this.setState({\n      addTask:{\n        name: e.target.value,\n        status: 'pending'\n      }\n    })\n  }\n\n  componentDidMount() {\n    axios('http://localhost:8080/tasks')\n    .then(res => {\n      this.tasks = res.data;\n      let tasks = res.data;\n      this.setState({\n        tasks: tasks\n      })\n    })\n  }\n\n  // addTask = newTask => {\n  //   this.setState({\n  //     newTask: [this.state.showCards, newTask]\n  //   })\n  // }\n\n  checkout = () => {\n      axios.post('http://localhost:8080/tasks', {\n        task: this.state.task,\n      })\n  }\n\n  existingTasks() {\n  }\n\n  addTask = (e) => {\n    axios.post('http://localhost:8080/tasks/', this.state.addTask)\n    \n    e.preventDefault();\n    const pendingTask = this.state.addTask;\n    if(this.state.addTask.name!==\"\"){\n      const newTask=[...this.state.tasks, pendingTask];\n      console.log(newTask)\n      this.setState({\n        tasks: newTask\n      })\n    }\n  }\n  // deleteBtn = (taskName) => {\n  //   let\n    \n  // }\n  render() {\n    // let existingTasks = this.state.tasks.map((task) => {\n    //   console.log(task)\n    //   return <TaskRow task={task}/>\n    // })\n    let doneTasks = this.state.tasks.filter((task) => {\n      return(task.status === 'done')\n    })\n\n    let pendingTasks = this.state.tasks.filter((task) => {\n      return(task.status === 'pending')\n    })\n    console.log(pendingTasks)\n    console.log(doneTasks)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <RegisterationForm \n          />\n        <hr id=\"hr1\"/>\n          <form id=\"toDoForm\" onSubmit={this.addTask}>\n            <input type=\"text\" placeholder=\"Add Task\" value={this.state.addTask.name} onChange={this.InputChangeHandle}/>\n            <button type=\"Submit\" id=\"submitBtn\">+ ADD</button>\n          </form>\n          <table>\n            <tr>\n              <th>Pending</th>\n            </tr>\n            {\n              pendingTasks.map((task) => {\n                return <TaskRow task={task.name} delete={this.deleteBtn} id={task._id}/>\n              })\n            }\n          </table>\n          <table>\n            <tr>\n              <th>Done</th>\n            </tr>\n            {\n              doneTasks.map((task) => {\n                return <TaskRow task={task.name}/>\n              })\n            }\n          </table>\n          <hr id=\"hr2\"/>\n        </header>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}